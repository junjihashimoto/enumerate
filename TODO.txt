
-- * modular integers
--import Data.Modular (not on stack)





--------------------------------------------------

flags = extensions ++ options

  where

  ------------------------------

  extensions = extensions2flags $
      "CPP NoImplicitPrelude ConstraintKinds DataKinds DefaultSignatures DeriveDataTypeable DeriveGeneric ExplicitNamespaces FlexibleContexts FlexibleInstances GADTs KindSignatures LambdaCase RankNTypes ScopedTypeVariables TupleSections TypeFamilies TypeOperators UndecidableInstances PackageImports"
#if HAS_EXTENSION_DerivingStrategies
   ++ " DerivingStrategies"
#endif

  ------------------------------

  options = [
#if !MIN_VERSION_GLASGOW_HASKELL(8,0,0,0)
              ("-I" ++ "include/")
            , ("-i" ++ "sources/")
#endif
            ]

  ------------------------------







--------------------------------------------------
-- Imports: (Internal) Project Libraries ---------
--------------------------------------------------

import Enumerate.Types

--------------------------------------------------

import Enumerate.Function.Extra
import Enumerate.Function.Types
import Enumerate.Function.Reify
import Enumerate.Function.Invert

--------------------------------------------------
-- Imports: (External) Dependency Libraries ------
--------------------------------------------------

import "exceptions" Control.Monad.Catch (MonadThrow(..))

--------------------------------------------------
-- Imports: Standard Library ---------------------
--------------------------------------------------








--------------------------------------------------
-- Â« Ix Â» ----------------------------------------
--------------------------------------------------

    -- | The list of values in the subrange defined by a bounding pair.
    range               :: (a,a) -> [a]

--------------------------------------------------
--------------------------------------------------

    -- | The position of a subscript in the subrange.
    index               :: (a,a) -> a -> Int

--------------------------------------------------
--------------------------------------------------

    -- | Returns 'True' the given subscript lies in the range defined
    -- the bounding pair.
    inRange             :: (a,a) -> a -> Bool

--------------------------------------------------
--------------------------------------------------
















data These a b

  = This  a
  | That    b
  | These a b

  deriving (Show, Eq, Ord, Generic, Enumerable)









@Ix@ instance:

@
instance ('Enumerable' a, 'Enumerable' b) => 'Ix' (These a b) where

  '' = ''
  '' = ''
  '' = ''
@






instance (Enumerable a, Enumerable b) => Enum (These a b) where toEnum   = toEnum_enumerable   array_enumerable; fromEnum = fromEnum_enumerable table_enumerable






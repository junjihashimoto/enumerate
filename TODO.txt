
-- * modular integers
--import Data.Modular (not on stack)





--------------------------------------------------

flags = extensions ++ options

  where

  ------------------------------

  extensions = extensions2flags $
      "CPP NoImplicitPrelude ConstraintKinds DataKinds DefaultSignatures DeriveDataTypeable DeriveGeneric ExplicitNamespaces FlexibleContexts FlexibleInstances GADTs KindSignatures LambdaCase RankNTypes ScopedTypeVariables TupleSections TypeFamilies TypeOperators UndecidableInstances PackageImports"
#if HAS_EXTENSION_DerivingStrategies
   ++ " DerivingStrategies"
#endif

  ------------------------------

  options = [
#if !MIN_VERSION_GLASGOW_HASKELL(8,0,0,0)
              ("-I" ++ "include/")
            , ("-i" ++ "sources/")
#endif
            ]

  ------------------------------







--------------------------------------------------
-- Imports: (Internal) Project Libraries ---------
--------------------------------------------------

import Enumerate.Types

--------------------------------------------------

import Enumerate.Function.Extra
import Enumerate.Function.Types
import Enumerate.Function.Reify
import Enumerate.Function.Invert

--------------------------------------------------
-- Imports: (External) Dependency Libraries ------
--------------------------------------------------

import "exceptions" Control.Monad.Catch (MonadThrow(..))

--------------------------------------------------
-- Imports: Standard Library ---------------------
--------------------------------------------------








--------------------------------------------------
-- « Ix » ----------------------------------------
--------------------------------------------------

    -- | The list of values in the subrange defined by a bounding pair.
    range               :: (a,a) -> [a]

--------------------------------------------------
--------------------------------------------------

    -- | The position of a subscript in the subrange.
    index               :: (a,a) -> a -> Int

--------------------------------------------------
--------------------------------------------------

    -- | Returns 'True' the given subscript lies in the range defined
    -- the bounding pair.
    inRange             :: (a,a) -> a -> Bool

--------------------------------------------------
--------------------------------------------------








--------------------------------------------------
#if HAS_BASE_Contravariant

import qualified "base" Data.Contravariant as Contravariant
 ( Contravariant
 )

#endif










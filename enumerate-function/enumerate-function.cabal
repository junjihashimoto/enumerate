cabal-version:       2.4
                     -- ^ for « common » stanzas,
build-type:          Simple

--------------------------------------------------

name:                enumerate-function
version:             0.3

                     -- ^ ❲ A.B.C.D ❳:
                     --
                     -- • ❲ A.B ❳ is the MajorVersion,
                     -- • ❲ C ❳ is the MinorVersion,
                     -- • ❲ D ❳ is a PatchVersion.

-- x-revision:          1

--------------------------------------------------
-- Information -----------------------------------
--------------------------------------------------

synopsis:    Functions: Invert, Render, Validate them (via Enumeration)

description: Invert functions by brute-force, enumerating their domain.
             .
             Once a function is "reified" into its inputs\/outputs, we can use it like any other value.
             We can:
             .
             * Render i(and serialize) it.
             * Get its inverse.
             * Check its properties (like totality, injectivity, surjectivity)
             .
             See the "Enumerate.Function" module for examples for documentation.
             .
             See also the @<https://hackage.haskell.org/package/enumerate enumerate>@ package
             (a version-locked dependency, providing a generalized @Enum@,
             with which all inputs of a function can be enumerated).
             .

category:    Data

--------------------------------------------------

author:              Spiros Boosalis
maintainer:          samboosalis@gmail.com
homepage:            https://github.com/sboosali/enumerate#readme

--------------------------------------------------

tested-with: GHC == 8.6.1
           , GHC == 8.4.3
           , GHC == 8.2.2
           , GHC == 8.0.2
           , GHC == 7.10.3

           , GHCJS == 8.4.0.1

--------------------------------------------------

license:             BSD-4-Clause
copyright:           2018 Sam Boosalis
license-file:        LICENSE

--------------------------------------------------

extra-source-files: README.md
                    .travis.yml
                    HLint.hs
                    stack.yaml

--data-files:
--  data/

--------------------------------------------------

source-repository head
  type:     git
  location: https://github.com/sboosali/enumerate
  subdir:   enumerate-function

--------------------------------------------------
-- Flags -----------------------------------------
--------------------------------------------------

flag development

  default:     False

  description: Dynamic checking and exposed internals (for development).
  manual:      True

--------------------------------------------------
-- Common Stanzas --------------------------------
--------------------------------------------------

common Haskell2020Library

 ------------------------------

 default-language: Haskell2010
 
 ------------------------------
 
 -- build-depends: base-noprelude >=4.10 && <5

 ------------------------------

 include-dirs:     include/
 includes:         sboo-base-feature-macros.h
 install-includes: sboo-base-feature-macros.h

 -----------------------------

 ghc-options:

  --------------------
  -- warning groups
  --------------------

             -Wall

  --------------------
  -- disabled warnings
  --------------------

  --------------------
  -- enabled warnings
  --------------------

             -fwarn-name-shadowing
             -fwarn-tabs
              
  --------------------
  -- (miscellaneous warnings)
  --------------------

  -- raise a warning into an error
  -- -Werror=missing-fields

 ------------------------------
 
 if impl(ghc >= 7.10)
    ghc-options:

        --------------------
        -- disabled warnings
        --------------------

                -fno-warn-unticked-promoted-constructors
                -- ^ NOTE « -fno-warn-... » is the old style,
                --        « -Wno-... » is the new style.

 ------------------------------
 
 if impl(ghc >= 8.0)
    ghc-options:

        --------------------
        -- warning groups
        --------------------

                -Wcompat
      
        --------------------
        -- disabled warnings
        --------------------

                -Wno-unticked-promoted-constructors
         --TODO -fno-warn-redundant-constraints

        --------------------
        -- enabled warnings
        --------------------

                -Wnoncanonical-monad-instances
                -Wnoncanonical-monadfail-instances

                -Wincomplete-record-updates
                -Wincomplete-uni-patterns

                -Wmissing-methods
                -Widentities

                -- -Wmissing-exported-signatures
                -- -Whi-shadowing

        --------------------

                -Wtyped-holes

 ------------------------------
  
 if flag(development) && impl(ghc >= 8.0)
 
    ghc-options: -fdefer-typed-holes
                 -- ^ Use `typed-holes`, not `undefined`, during development.

 ------------------------------
  
 if impl(ghc >= 8.2)
    ghc-options:

        --------------------
        -- enabled warnings
        --------------------

                -Wcpp-undef

                -Wmissing-home-modules

                -Wunbanged-strict-patterns

 ------------------------------

 default-extensions:

   --------------------
   -- "controversial"
   --------------------
                    NoImplicitPrelude

   --------------------
   -- `deriving`
   --------------------
                    AutoDeriveTypeable
                    DeriveDataTypeable
                    DeriveGeneric
                    DeriveFunctor
                    DeriveFoldable
                    DeriveTraversable
                    StandaloneDeriving
--TODO                    DeriveLift

   --------------------
   -- syntax
   --------------------
                    PackageImports
                    LambdaCase
                    EmptyCase
                    TypeOperators
                    PostfixOperators
                    BangPatterns
                    KindSignatures
                    NamedFieldPuns
                    RecordWildCards
                    TupleSections
                    MultiWayIf
                    DoAndIfThenElse
                    EmptyDataDecls
                    InstanceSigs
                       
   --------------------
   -- typeclasses
   --------------------
                    MultiParamTypeClasses
                    FlexibleContexts
                    FlexibleInstances
                    TypeFamilies
                    FunctionalDependencies

   --------------------
   -- patterns
   --------------------
                    ViewPatterns
                    PatternSynonyms

   --------------------
   -- (miscellaneous)
   --------------------
                    ScopedTypeVariables

 ------------------------------

 other-extensions:

   --------------------
   -- macros
   --------------------
                  CPP
   --               TemplateHaskell
   --               QuasiQuotes

   --------------------
   -- syntax (of literals)
   --------------------
                  OverloadedStrings
                  OverloadedLists

   --------------------
   -- (miscellaneous)
   --------------------

   -- RebindableSyntax
   -- kinds:
   -- DataKinds ConstraintKinds
   -- harmful to inference:
   -- GADTs RankNTypes
   -- (miscellaneous)

 -----------------------------

 if impl(ghc >= 7.10)

    other-extensions: DeriveAnyClass

 ------------------------------

 if impl(ghc >= 8.0)

    default-extensions: DuplicateRecordFields

    other-extensions:   TemplateHaskellQuotes

 -----------------------------

 if impl(ghc >= 8.4)

    default-extensions: DerivingStrategies
                      , DeriveAnyClass
                      , GeneralizedNewtypeDeriving

 -----------------------------

 if impl(ghc >= 8.6)
    default-extensions: StarIsType

    -- ^ Enabling « StarIsType » is necessary for forwards-compatibility.
    --
    --   Using « :: * -> * » versus « :: Type -> Type » is necessary
    --   for backwards-compatibility.
    --
    --   "Before GHC 8.0: the only way to refer to the kind of lifted types was the * syntax."
    --
    --   See « https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0030-remove-star-kind.rst ».

 -----------------------------

--------------------------------------------------

common Haskell2020Program

 import: Haskell2020Library

 ------------------------------

 ghc-options:
 
   --------------------
   -- Compilation -----
   --------------------
 
             -O2

   --------------------
   -- Runtime ---------
   --------------------
 
             -threaded
             -rtsopts -with-rtsopts=-N             
 
   --------------------
   -- Warnings --------
   --------------------
 
             -fno-warn-missing-signatures
             -fno-warn-type-defaults

 ------------------------------

--------------------------------------------------
-- Library ---------------------------------------
--------------------------------------------------

library

 import: Haskell2020Library

------------------------------

 hs-source-dirs: sources
 
------------------------------

 exposed-modules:
                 Enumerate.Function
                 Enumerate.Function.Types
                 Enumerate.Function.Map
                 Enumerate.Function.Reify
                 Enumerate.Function.Invert

                 Enumerate.Orphans.Function

 -- (for doctest / haddocks / exectuable) other-modules:
                 Enumerate.Function.Extra
                 Enumerate.Function.Example

 -----------------------------

 build-depends: base   >=4.8 && <5 
              , spiros >=0.3

              , enumerate >=0.3
                -- 
                -- NOTE all « enumerate-* » packages in this project
                --      have lockstep versioning.
                --

              , containers >=0.5

              , semigroups >=0.18
              , exceptions >=0.8
              , MemoTrie >=0.6
              , deepseq >= 1.3

  -- ,
  -- , transformers
  -- , mtl
  -- , bytestring
  -- , stm
  -- , template-haskell

  -- ,
  -- , lens
  -- , exceptions
  -- , free
  -- , bifunctors
  -- , profunctors
  -- , either
  -- , pipes
  -- , formatting
  -- , servant
  -- , Earley
  -- , split
  -- , interpolatedstring-perl6
  -- , wl-pprint-text
  -- , text
  -- , aeson
  -- , hashable
  -- , unordered-containers
  -- , async
  -- , parallel

------------------------------

 ghc-options: -Wall
              -fno-warn-unticked-promoted-constructors

------------------------------

 default-language: Haskell2010

 default-extensions: AutoDeriveTypeable
                     BangPatterns
                     DeriveDataTypeable
                     DeriveFoldable
                     DeriveFunctor
                     DeriveGeneric
                     DeriveTraversable
                     DoAndIfThenElse
                     EmptyCase
                     EmptyDataDecls
                     FlexibleContexts
                     FlexibleInstances
                     FunctionalDependencies
                     KindSignatures
                     LambdaCase
                     MultiParamTypeClasses
                     MultiWayIf
                     NamedFieldPuns
                     PostfixOperators
                     RecordWildCards
                     ScopedTypeVariables
                     StandaloneDeriving
                     TupleSections
                     TypeFamilies
                     TypeOperators
                     ViewPatterns
                     PackageImports

------------------------------

--------------------------------------------------
-- Programs --------------------------------------
--------------------------------------------------

executable example-enumerate-function

 import: Haskell2020Program

 hs-source-dirs:      executables
 main-is:             Main.hs

 default-language:    Haskell2010
 ghc-options:         -Wall -threaded -rtsopts -with-rtsopts=-N

 build-depends:
               base
             , enumerate-function

-- $ stack build && stack exec -- example-enumerate-function

--------------------------------------------------
-- Tests -----------------------------------------
--------------------------------------------------

test-suite doc

 -----------------------------

 import: Haskell2020Program

 -----------------------------

 if !impl(ghc)
    buildable: False
    -- ^ Because « ghcjsi » doesn't work.

 -----------------------------

 hs-source-dirs:      tests
 main-is:             DocTests.hs
 type:                exitcode-stdio-1.0

 -----------------------------

 default-language:    Haskell2010
 ghc-options:         -Wall -threaded -rtsopts -with-rtsopts=-N

 -----------------------------

 build-depends: base
              , enumerate

              , doctest

--------------------------------------------------

-- test-suite unit

--  -----------------------------

--  import: Haskell2020Program

--  -----------------------------

--  hs-source-dirs:      tests
--  main-is:             UnitTests.hs
--  type:                exitcode-stdio-1.0

--  -----------------------------

--  other-modules:
--                Enumerate.Function.Test

--  -----------------------------

--  default-language:    Haskell2010
--  ghc-options:         -Wall -threaded -rtsopts -with-rtsopts=-N

--  -----------------------------

--  build-depends: base
--               , enumerate

--               , HUnit      
--               , QuickCheck >=2.8
--               , smallcheck >=1.1

--               , tasty
--               , tasty-hunit
--               , tasty-quickcheck
--               , smallcheck

--  -----------------------------

-- $ stack test unittest

--------------------------------------------------
-- Benchmarks ------------------------------------
--------------------------------------------------

benchmark command

 import: Haskell2020Program

 hs-source-dirs:      benchmarks
 main-is:             Bench.hs
 type:                exitcode-stdio-1.0

 default-language: Haskell2010
 ghc-options:      -Wall -threaded -rtsopts -with-rtsopts=-N

 build-depends:
               base
             , enumerate-function
             , criterion
             , deepseq

-- $ stack bench

--------------------------------------------------